name: CI

on: [push, pull_request]

jobs:
  check_pylint:
    name: Pylint for Python-${{ matrix.python-version }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: [3.6]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: make install-dev
      - name: Lint with pylint
        run: make check-pylint
        continue-on-error: true

  # unit_tests:
  #   name: Run unit tests (${{ matrix.python-version }}, ${{ matrix.os }})
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu-latest]
  #       python-version: [3.6, 3.7, 3.8, 3.9]
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Set up Python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v1
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #     - name: Install dependencies
  #       run: make install-dev
  #     - name: Run unit tests
  #       run: make run-unit-tests-w-coverage
  #     - name: Upload coverage artifact
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: coverage-unit-test-py${{ matrix.python-version }}
  #         path: .coverage

  tests:
    name: ${{ matrix.task.name }} (py-${{ matrix.python-version }}, es-${{ matrix.es.version}}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 4
      matrix:
        os: [ubuntu-latest]
        python-version: [3.6, 3.7, 3.8, 3.9]
        es:
          - use_es: true
            version: 6.5.4
          - use_es: true
            version: 6.8.3
          - use_es: false
            verion: NO
        task:
          - name: Unit tests
            run: make run-unit-tests-w-coverage
          - name: Integration tests
            run: make run-integration-tests-w-coverage
        exclude:
          - task:
              name: Unit tests
            es:
              use_es: true

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: make install-dev
      - name: Install Elasticsearch 6
        if: matrix.es.use_es && startsWith( matrix.es.version, '6')
        run: |
          wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-${{ matrix.es.version }}.tar.gz
          tar -xzf elasticsearch-${{ matrix.es.version }}.tar.gz
          make install-elasticsearch6
      - name: Install Elasticsearch 7
        if: matrix.es.use_es && startsWith( matrix.es.version, '7')
        run: |
          wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-${{ matrix.es.version }}-linux-x86_64.tar.gz
          tar -xzf elasticsearch-${{ matrix.es.version }}-linux-x86_64.tar.gz
          make install-elasticsearch7
      - name: Configure Elasticsearch
        if: matrix.es.use_es
        run: |
          echo "ELASTICSEARCH_ENABLED=True" >> .env
          echo "ES_HOME=`realpath elasticsearch-${{ matrix.es.version }}`" >> .env
          cat .env
      - name: ${{ matrix.task.name }}
        run: ${{ matrix.task.run }}
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v2
        with:
          name: ".coverage.${{ matrix.task.name }}.py${{ matrix.python-version }}.es${{ matrix.es.version }}"
          path: .coverage

  coverage:
    name: Combine coverage
    needs: [tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: 3.6
      - name: Download coverage artifacts
        uses: actions/download-artifact@v2
        with:
          path: coverage-data
      - name: Combine coverage
        run: |
          pip install coverage
          ls -R coverage-data
          coverage combine coverage-data
          coverage report --show-missing > coverage.report
          coverage html docs/coverage
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          path: coverage.report
      - name: Commit coverage report
        shell: bash
        run: |
          # setup username and email
          git config --local user.name "Github Actions Bot"
          git config --local user.email "<>"
          # stage, commit and push docs/coverage
          git add docs/coverage
          git commit -m "update coverage report"
          git push origin ${GITHUB_REF#refs/heads/}
