@@grammar::KarpQueryV6

start
    =
    expression $
    ;

expression
    =
    | logical_expression
    | query_expression
    ;

query_expression
    =
    | contains
    | endswith
    | equals
    | exists
    | freergxp
    | freetext
    | gt
    | gte
    | lt
    | lte
    | missing
    | regexp
    | startswith
    ;

logical_expression
    =
    | and
    | or
    | not
    ;

and::And
    =
    'and' '(' exps+:expression {'||' exps+:expression}* ')'
    ;

contains::Contains
    =
    'contains' '|' field:identifier '|' arg:string
    ;

endswith::Endswith
    =
    'endswith' '|' field:identifier '|' arg:string
    ;

equals::Equals
    =
    'equals' '|' field:identifier '|' arg:argument
    ;

exists::Exists
    =
    'exists' '|' field:identifier
    ;

freergxp::Freergxp
    =
    'freergxp' '|' arg:string
    ;

freetext
    =
    | freetext_any
    | freetext_string
    ;

freetext_any::FreetextAnyButString
    =
    'freetext' '|' arg:any_but_string
    ;

freetext_string::FreetextString
    =
    'freetext' '|' arg:string
    ;

gt::Gt
    =
    op:'gt' '|' field:identifier '|' arg:argument
    ;

gte::Gte
    =
    op:'gte' '|' field:identifier '|' arg:argument
    ;

lt::Lt
    =
    op:'lt' '|' field:identifier '|' arg:argument
    ;

lte::Lte
    =
    op:'lte' '|' field:identifier '|' arg:argument
    ;

missing::Missing
    =
    'missing' '|' field:identifier
    ;

not::Not
    =
    'not' '(' exps+:expression {'||' exps+:expression}* ')'
    ;

or::Or
    =
    'or' '(' exps+:expression {'||' exps+:expression}* ')'
    ;

regexp::Regexp
    =
    'regexp' '|' field:identifier '|' arg:string
    ;

startswith::Startswith
    =
    'startswith' '|' field:identifier '|' arg:string
    ;

argument
    =
    | integer
    | string
    ;

any_but_string
    =
    integer
    ;

string
    =
    /[^|()]+/
    ;

# for simplicity, add |,(,) as not allowed here, even though it shouldn't matter. should be possible to namea  field "myfield|"
identifier = /[^.|)(]+/ ;

integer::int
    =
    /\d+/
    ;
